scopeName: 'text.tex.latex'
name: 'LaTeX2e'
fileTypes: [ 'tex' ]
limitLineLength: false

# Atom uses the following regex engine -> https://github.com/kkos/oniguruma/blob/master/doc/RE

# Rules to be implemented. Please add to repository and link to a 'meta' to include.
# The following rules correspond to the ten special latex characters. They are applied at the outmost level, but can be called inside patterns by using `$self`
patterns: [
  { include: '#metaControl' } # must go first to catch escaped sequences
  { include: '#metaPercent' }
  { include: '#metaDollar' }
  { include: '#metaTilde' }
  { include: '#metaAmpersand' }
  { include: '#metaOpenBrace' }
  { include: '#metaCloseBrace' }
  { include: '#metaUnderscore' }
  { include: '#metaCaret' }
  { include: '#metaHashtag' }
]

repository:
# Main meta groups; directly referenced in `patterns`
  metaControl: {
    comment: 'All these commands begin with a backslash.'
    patterns: [
      { include: '#metaCommonControlSequences' }
      { include: '#metaEnvironment' }
      { include: '#metaDollar' } # Because of \( and \[. Must appear below escaped characters, to prevent \$ from being a false positive.

      # The following rules are "catch alls" for any control sequences not explicitly addressed above.
      { include: '#metaPrimitives' }
      { include: '#controlSymbol' }
      { include: '#controlWord' }
    ]
  }
  metaPercent: {
    comment: 'This is called when there is a lone percent sign (escaped covered by metaControl).'
    patterns: [
      { include: '#magicComment' }
      { include: '#lineComment' }
    ]
  }
  metaDollar: {
    comment: 'Called when $ sign found. Posiibly deprecated by \( and \) (which is called in metaControl), but here for completeness. The previous statement did not make its meaning very clear.'
    patterns: [
      { include: '#displayMathMode' }
      { include: '#inlineMathMode' }
    ]
  }
  metaTilde: {
    comment: 'This is only an unbreaking space (when alone).'
    name: 'punctuation.space.latex'
    match: '~'
  }
  metaAmpersand: {
    comment: 'The ampersand normally represents alignment (catcode 4). Probably not useful (or legal) outside of align or table environment. However, it must be left this way to let users implement custom environments.'
    name: 'punctuation.alignment.latex'
    match: '&'
  }
  metaOpenBrace: {
    comment: 'This is useful to ensure balanced brackets for things like {$ math {nested math} math $}, as `}` ends mathmode (for other reasons).'
    contentName: 'meta.group.braces.latex'
    begin: '{'
    beginCaptures:
      0:
        name: 'punctuation.definition.group.begin.latex'
    end: '}'
    endCaptures:
      0:
        name: 'punctuation.definition.group.end.latex'
    patterns: [
      { include: '$self' }
    ]
  }
  metaCloseBrace: {
    comment: 'To reach this means unbalanced brackets: THIS IS AN ERROR. I dont care if youre doing fancy file mish-mashing; DONT DO IT. The capture groups feels like a hack job to get multiple scopes on the same match, but oh well.'
    captures:
      0:
        name: 'invalid.illegal.latex'
      1:
        name: 'punctuation.definition.group.end.latex'
    match: '(})'
  }
  metaUnderscore: {
    comment: 'Underscore means subscript. It will take an argument in brackets if possible. If not, just the single next character. Only valid when within mathmode. May address this later.'
    name: 'markup.other.subscript.latex'
    begin: '(\\_)\\s*'
    beginCaptures:
      1:
        name: 'punctuation.subscript.latex'
    end: '(?<=[^\\_\\s])'
    patterns: [
      { include: '$self' }
    ]
  }
  metaCaret: {
    comment: 'Like underscore, but superscript'
    patterns: [
      { include: '#doubleCaret' }
      {
        comment: 'Matches a caret and following group'
        name: 'markup.other.superscript.latex'
        begin: '(\\^)\\s*'
        beginCaptures:
          1:
            name: 'punctuation.superscript.latex'
        end: '(?<=[^\\^\\s])'
        patterns: [
          { include: '$self' }
        ]
      }
    ]
  }
  metaHashtag: {
    comment: 'I dont like calling this the pound symbol. Catcode says it is a parameter identifier.'
    match: '(\\#{3,}[0-9]+)|(\\#{2}[0-9]+)|(\\#[0-9]+)'
    captures:
      1:
        name: 'variable.parameter.hashtag.3.latex'
      2:
        name: 'variable.parameter.hashtag.2.latex'
      3:
        name: 'variable.parameter.hashtag.1.latex'
  }

# Other meta groups
  metaCommonControlSequences: {
    comment: 'This is a collection of control sequences that are given specific rules. The ones here should be common to all users.'
    patterns: [
      { include: '#doubleBackslash' }
      { include: '#escapedCharacter' }
      { include: '#documentclass' }
      { include: '#usepackage' }
      { include: '#inputFile' }
      { include: '#sectioning' }
      { include: '#makeAtSomething' }
      { include: '#verbatim' }
      { include: '#item' }
      # { include: '#url' }
      # { include: '#text' } # To break out of mathmode; need to investigate how to enforce plain styling
      # { include: '#commandDefinitions' }
      # { include: '#styling' } # eg. \bf \it (deprecated)
      # { include: '#latexStyling' } # eg. \emph
      # { include: '#marginpar' }
      # { include: '#footnote' }
      # { include: '#metaReferences' } # maybe include \ref \label as well?
      # { include: '#verbScantokens' } # not sure what this is for
      # { include: '#constants' } # words that represent constants
    ]
  }
  metaEnvironment: {
    comment: 'This collection can be used to give properties to specific environments.'
    patterns: [
      { include: '#envDocument' }
      { include: '#envFigure' }
      { include: '#metaEnvMath' }
      # { include: '#metaEnvTable' }
      # { include: '#metaEnvList' }
      # { include: '#envGnuplot' }
      # { include: '#metaEnvMinted' }
      # { include: '#metaEnvListing' }
      # { include: '#envLuaCode' }
      # { include: '#envVerbatim' }
      # { include: '#tikzPicture' }
      { include: '#envGeneric' }
    ]
  }
  metaPrimitives: {
    comment: 'Allows organisation of various primitive sources'
    patterns: [
      { include: '#texPrimitives' }
      { include: '#pdfTexPrimitives' }
      { include: '#unsortedPrimitives' }
    ]
  }
# Other
  escapedCharacter: {
    comment: 'Finds escaped characters like \$ and \%. Uses this regex so unique capture groups can be used.'
    name: 'constant.character.latex'
    match: '\\\\(\\&|\\%|\\$|\\#|\\_|\\{|\\}|(textascii(tilde|circum)|textbackslash)(?=[^a-zA-Z@]))'
  }
  controlSymbol: {
    comment: 'Mostly covered by escapedCharacter, but this is a catch all for any control symbols'
    name: 'keyword.control.symbol.latex'
    match: '\\\\([^a-zA-Z@]|@[^a-zA-A@])'
  }
  controlWord: {
    comment: 'A catch all for latex control words that have not already been identified.'
    name: 'support.function.general.latex'
    match: '\\\\[a-zA-Z@]+'
  }
  accents: {
    comment: 'For standard latex accent macros such as \^ or \`. Not used for now, at least until better rules are developed.'
    name: 'constant.character.accent.latex'
    match: '''\\\\([\\`\\'\\^\\"\\~\\=\\.]\\s*(\\w|\\{\\w?\\})|[Hcklbdruv]\\{\\w?\\})'''
  }
  lineComment: {
    name: 'comment.line.percentage.latex'
    begin: '%'
    end: '$'
    patterns: [
      { include: '#magicComment' }
    ]
  }
  escapedCurlyBracket: {
    comment: 'Escaped }. Possible deprecated by escapedCharacter.'
    name: 'constant.character.latex'
    match: '\\\\}|\\\\{'
  }
  usepackage: {
    comment: 'Package finder. Similar to documentclass, but allows custom colours. A macro name is only valid with letters (exceptions apply--eg. makeatletter). This checks to see if the name is purely "usepackage" and the following character is not a legal part of the macro name.'
    name: 'meta.preamble.latex'
    begin: '\\\\usepackage(?=[^a-zA-Z@])'
    beginCaptures:
      0:
        name: 'keyword.control.preamble.latex'
    end: '(?<=\\})|(^\\s*$)'
    endCaptures:
      1:
        name: 'invalid.illegal.latex'
    patterns:[
      { include: '#awaitingArgumentBrackets' }
      {
        comment: 'Only this one necessary because escaped characters will be picked up by awaitingArgumentBrackets.'
        include: '#lineComment'
      }
      {
        comment: 'Will try and find optional arguments first.'
        include: '#optionalArgumentScope'
      }
      { include: '#altArgumentScope' }
    ]
  }
  sectioning: {
    comment: 'Covers all sectioning commands such as section, subsection, subparagraph, etc. The last four are KOMAscript specific.'
    name: 'support.function.section.latex'
    begin: '\\\\((sub){0,2}section|(sub){0,1}paragraph|part|chapter|addpart|addchap|addsec|minisec)(\\*)?(?=[^a-zA-Z@])'
    beginCaptures:
      0:
        name: 'entity.name.section.$1.latex'
    end: '(?<=\\})|(^\\s*$)'
    endCaptures:
      1:
        name: 'invalid.illegal.latex'
    patterns: [
      { include: '#awaitingArgumentBrackets' }
      {
        comment: 'Only this one necessary because escaped characters will be picked up by awaitingArgumentBrackets.'
        include: '#lineComment'
      }
      {
        comment: 'Will try and find optional arguments first.'
        include: '#optionalArgumentScope'
      }
      { include: '#argumentScope' }
    ]
  }
  doubleBackslash: {
    match: '\\\\\\\\'
    name: 'constant.character.newline.latex'
  }
  commentMeta: {
    comment: 'Main purpose is to distinguish escaped % from comments. Deprecated.'
    patterns: [
      { include: '#doubleBackslash' }
      { include: '#escapedCharacter' }
      { include: '#magicComment' }
      { include: '#lineComment' }
    ]
  }
  magicComment: {
    comment: 'Can be improved to change color depending if the command matches a known string'
    name: 'keyword.control.magic.latex'
    match: '''(?x)   # Allow comments like this. More of an educational thing, really, for anyone reading this.
     ((        # Capture groups 1 & 2
       (%)     # Capture percent sign
       (\\ !(?>TEX|BIB)\\ )  # See https://github.com/kkos/oniguruma/blob/771535fce64f225f9fa2f965dbb55277e18fbde9/doc/RE#L252 for ?>
       (\\S+)    # A word (this is required as far as I know)
       )       # End capture group 2
       (\\ = \\ )  # Match = with space (required)
     )         # End capture group 1
     .*$       # To end; some options have spaces
   '''
  }
  documentclass: {
    comment: 'Documentclass finder.'
    name: 'meta.preamble.latex'
    begin: '\\\\documentclass(?=[^a-zA-Z@])'
    beginCaptures:
      0:
        name: 'keyword.control.preamble.latex'
    end: '(?<=\\})|(^\\s*$)'
    endCaptures:
      1:
        name: 'invalid.illegal.latex'
    patterns:[
      { include: '#awaitingArgumentBrackets' }
      { include: '#lineComment' }
      { include: '#optionalArgumentScope' }
      { include: '#altArgumentScope' }
    ]
  }
  awaitingArgumentBrackets: {
    comment: 'Anything not whitespace, opening bracket or comment will be flagged as invalid.illegal. Should take priority over other matches (even comments, as comments have the escaped % exception).'
    match: '[^{\\[\\s%]+'
    name: 'invalid.illegal.latex'
  }
  optionalArgumentScope: {
    comment: 'Matches options brackets and everything inside them.'
    contentName: 'variable.parameter.optional.latex'
    begin: '\\['
    beginCaptures:
      0:
        name: 'punctuation.definition.optional.begin.latex'
    end: '\\]'
    endCaptures:
      0:
        name: 'punctuation.definition.optional.end.latex'
    patterns: [
      {
        comment: 'AFAIK, the optional parameters never have nested brackets. Will come back to this after a while or if I find they do.'
        include: '#commentMeta'
      }
      { include: '#escapedCurlyBracket' }
      { include: '#metaOpenBrace' }
    ]
  }
  argumentScope: {
    comment: 'Matches arguments brackets (the outmost of nested brackets). Is a general rule to use anywhere.'
    contentName: 'variable.parameter.argument.latex'
    begin: '\\{'
    beginCaptures:
      0:
        name: 'punctuation.definition.argument.begin.latex'
    end: '\\}'
    endCaptures:
      0:
        name: 'punctuation.definition.argument.end.latex'
    patterns: [
      { include: '$self' }
    ]
  }
  altArgumentScope: {
    comment: 'Matches arguments brackets (the outmost of nested brackets). Specifically for commands like usepackage.'
    contentName: 'support.class.latex'
    begin: '\\{'
    beginCaptures:
      0:
        name: 'punctuation.definition.argument.begin.latex'
    end: '\\}'
    endCaptures:
      0:
        name: 'punctuation.definition.argument.end.latex'
    patterns: [
      { include: '$self' }
    ]
  }
  nestedSquareBrackets: {
    contentName: 'variable.parameter.optional.latex'
    begin: '\\['
    beginCaptures:
      0:
        name: 'punctuation.definition.optional.begin.latex'
    end: '\\]'
    endCaptures:
      0:
        name: 'punctuation.definition.optional.end.latex'
    patterns: [
      comment: 'Optimisation good to implement here. Rework commentMeta to be a more general check for escaped characters and comments'
      { include: '#commentMeta' }
      { include: '#escapedCloseSquareBracket' }
      { include: '#nestedSquareBrackets' }
    ]
  }
  endArgumentsMeta: {
    patterns: [
      { include: '#doubleBackslash' }
      { include: '#escapedCurlyBracket' }
    ]
  }
  inlineMathMode: {
    comment: 'This can be triggered using $ or \( \). Both can be used in the same pair.'
    contentName: 'string.other.math.inline.latex'
    begin: '(\\$)|(\\\\\\()'
    beginCaptures:
      0:
        name: 'string.other.math.inline.begin.latex'
    end: '(\\$)|(\\\\\\))|(?=\\})'
    endCaptures:
      0:
        name: 'string.other.math.inline.end.latex'
    patterns: [
      {
        comment: 'When in inline math, the exit can only be $ or \)'
        name: 'invalid.illegal.latex'
        match: '(\\\\(\\[|\\(|\\)))'
      }
      { include: '$self' }
    ]
  }
  displayMathMode: {
    comment: 'This can be triggered using $$ or \[ \]. Both can be used in the same pair.'
    contentName: 'string.other.math.display.latex'
    begin: '(\\$\\$)|(\\\\\\[)'
    beginCaptures:
      0:
        name: 'string.other.math.display.begin.latex'
      1:
        name: 'invalid.deprecated.latex'
    end: '(\\$\\$)|(\\\\\\])|(?=\\})'
    endCaptures:
      0:
        name: 'string.other.math.display.end.latex'
      1:
        name: 'invalid.deprecated.latex'
    patterns: [
      {
        comment: 'When in display math, the exit can only be $$ or \]'
        name: 'invalid.illegal.latex'
        match: '(?<=[^\\\\])(\\$)(?=[^\\$])|(\\\\(\\[|\\(|\\)))'
      }
      { include: '$self' }
    ]
  }
  envGeneric: {
    comment: 'Matches environments not recognised by other rules. Less lenient with random formatting here, it is expected to all be on one line.'
    contentName: 'meta.environment.latex'
    begin: '\\\\begin(\\{)([\\w \\*]*)(\\})'
    beginCaptures:
      0:
        name: 'support.function.environment.begin.latex'
      1:
        name: 'punctuation.definition.argument.begin.latex'
      2:
        name: 'variable.parameter.argument.latex'
      3:
        name: 'punctuation.definition.argument.end.latex'
    end: '\\\\end(\\{)(\\2)(\\})'
    endCaptures:
      0:
        name: 'support.function.environment.end.latex'
      1:
        name: 'punctuation.definition.argument.begin.latex'
      2:
        name: 'variable.parameter.argument.latex'
      3:
        name: 'punctuation.definition.argument.end.latex'
    patterns: [
      { include: '$self' }
    ]
  }
  envDocument: {
    comment: 'To stop the entire contents of the document environment being labelled. Its useless anyway, as I split up my work and just include it into the main file.'
    begin: '\\\\begin(\\{)(document)(\\})'
    beginCaptures:
      0:
        name: 'support.function.environment.begin.latex'
      1:
        name: 'punctuation.definition.argument.begin.latex'
      2:
        name: 'variable.parameter.argument.latex'
      3:
        name: 'punctuation.definition.argument.end.latex'
    end: '\\\\end(\\{)(document)(\\})'
    endCaptures:
      0:
        name: 'support.function.environment.end.latex'
      1:
        name: 'punctuation.definition.argument.begin.latex'
      2:
        name: 'variable.parameter.argument.latex'
      3:
        name: 'punctuation.definition.argument.end.latex'
    patterns: [
      { include: '$self' }
    ]
  }
  envFigure: {
    comment: 'Matches the common figure environment'
    contentName: 'meta.environment.figure.latex'
    begin: '\\\\begin(\\{)(figure)(\\})((\\[)(\\w*)(\\]))?'
    beginCaptures:
      0:
        name: 'support.function.environment.begin.latex'
      1:
        name: 'punctuation.definition.argument.begin.latex'
      2:
        name: 'variable.parameter.argument.latex'
      3:
        name: 'punctuation.definition.argument.end.latex'
      5:
        name: 'punctuation.definition.optional.begin.latex'
      6:
        name: 'variable.parameter.optional.latex'
      7:
        name: 'punctuation.definition.optional.end.latex'
    end: '\\\\end(\\{)(\\2)(\\})'
    endCaptures:
      0:
        name: 'support.function.environment.end.latex'
      1:
        name: 'punctuation.definition.argument.begin.latex'
      2:
        name: 'variable.parameter.argument.latex'
      3:
        name: 'punctuation.definition.argument.end.latex'
    patterns: [
      { include: '$self' }
    ]
  }
  metaEnvMath: {
    comment: 'Matches math environments'
    patterns: [
      { include: '#envMath' }
      # some sort of `alignat` env?
      # aligned|gathered
      # eqnarray (deprecated)
    ]
  }
  envMath: {
    comment: 'Matches math environments'
    name: 'meta.environment.math.$2.latex'
    contentName: 'string.other.math.block.$2.latex'
    begin: '\\\\begin(\\{)(align|equation|multline|split|gather)(\\*)?(\\})'
    beginCaptures:
      0:
        name: 'support.function.environment.begin.latex'
      1:
        name: 'punctuation.definition.argument.begin.latex'
      2:
        name: 'variable.parameter.argument.latex'
      4:
        name: 'punctuation.definition.argument.end.latex'
    end: '\\\\end(\\{)(\\2)(\\})'
    endCaptures:
      0:
        name: 'support.function.environment.end.latex'
      1:
        name: 'punctuation.definition.argument.begin.latex'
      2:
        name: 'variable.parameter.argument.latex'
      3:
        name: 'punctuation.definition.argument.end.latex'
    patterns: [
      { include: '$self' }
    ]
  }
  listEnvironment: {
    comment: 'Matches itemize/enumerate/description environment'
    contentName: 'meta.environment.list.latex'
    begin: '\\\\begin(\\{)((itemize|enumerate|description)(\\*)?)(\\})'
    beginCaptures:
      0:
        name: 'support.function.environment.begin.latex'
      1:
        name: 'punctuation.definition.argument.begin.latex'
      2:
        name: 'variable.parameter.argument.latex'
      5:
        name: 'punctuation.definition.argument.end.latex'
    end: '\\\\end(\\{)(\\2)(\\})'
    endCaptures:
      0:
        name: 'support.function.environment.end.latex'
      1:
        name: 'punctuation.definition.argument.begin.latex'
      2:
        name: 'variable.parameter.argument.latex'
      3:
        name: 'punctuation.definition.argument.end.latex'
    patterns: [
      { include: '$self' }
    ]
  }
  makeAtSomething: {
    comment: 'Matches the makeat(letter|other) commands so that they get custom highlighting (because @ is now a character)'
    contentName: 'markup.raw.verbatim.latex' # To make user aware of its effect
    begin: '(\\\\)makeatletter\\b'
    beginCaptures:
      0:
        name: 'support.function.makeat.latex'
    end: '(\\\\)makeatother\\b'
    endCaptures:
      0:
        name: 'support.function.makeat.latex'
    patterns: [
      { include: '$self'}
    ]
  }
  inputFile: {
    comment: 'Matches the input/include command and allows custom path colours. Technically a single letter file is valid, but I think it unlikely someone legitimately means it.'
    begin: '\\\\(input|include)(?=[^a-zA-Z@])'
    beginCaptures:
      0:
        name: 'keyword.control.$1.latex'
    end: '(?<=\\})|(^\\s*$)'
    endCaptures:
      1:
        name: 'invalid.illegal.latex'
    patterns:[
      { include: '#awaitingArgumentBrackets' }
      {
        comment: 'Only this one necessary because escaped characters will be picked up by awaitingArgumentBrackets.'
        include: '#lineComment'
      }
      { include: '#filePathScope' }
    ]
  }
  filePathScope: {
    comment: 'Matches a file path (UNIX only, add Windows yourself reader).'
    contentName: 'variable.parameter.argument.latex'
    begin: '\\{'
    beginCaptures:
      0:
        name: 'punctuation.definition.argument.begin.latex'
    end: '\\}'
    endCaptures:
      0:
        name: 'punctuation.definition.argument.end.latex'
    patterns: [
      {
        name: 'support.filepath.back.latex'
        match: '\\.{2,}\\/'
      }
      {
        name: 'support.filepath.home.latex'
        match: '\\.\\/'
      }
      {
        name: 'support.filepath.root.latex'
        match: '(?<=\\{)\\/'
      }
      {
        name: 'support.filepath.directory.latex'
        match: '[^(\\.+\\/)].*?\\/'
      }
      {
        name: 'support.filepath.file.latex'
        match: '[^}]*'
      }
    ]
  }
  verbatim: {
    comment: 'Finds an inline verbatim string of the format \verb+...+'
    name: 'string.function.verbatim'
    match: '\\\\verb([^a-zA-Z])(.*?)(\\1)'
    captures:
      0:
        name: 'support.function.vebatim.latex'
      1:
        name: 'punctuation.latex'
      2:
        name: 'markup.raw.verbatim.latex'
      3:
        name: 'punctuation.latex'
  }
  item: {
    comment: 'This command is still defined everywhere'
    name: 'keyword.control.latex'
    match: '\\\\item'
  }

  # Experimental
  unitMeasure: {
    comment: 'This will likely be merged into a different rule. Currently doesnt work.'
    name: 'constant.numeric.latex'
    match: '\\b((\\+|\\-)\\s*)?((\\d+(\\.|\\,)?)|(\\d*((\\.|\\,)\\d*)))\\s*(true\\s*)?(pt|pc|in|bp|cm|mm|dd|cc|sp|em|ex)\\b'
  }
  keywords: {
    comment: '''Taken from the TeXBook. Not sorted.
      at, bp, by, cc, cm, dd, depth, em, ex, fil, height, in, l, minus, mm, mu, pc, plus, pt, scaled, sp, spread, to, true, width
    '''
  }
  texPrimitives: {
    comment: 'This took a long time to write </joke>. Really though, dont even bother trying to edit it. Just add more primitives to the list in ../lib/resources, and recompile it.'
    name: 'entity.name.function.primitive.latex'
    match: '(\\\\)(((a(bove(displays(hortskip|kip)|withdelims)?|ccent|d(jdemerits|vance)|fter(assignment|group)|top(withdelims)?)|b(a(dness|selineskip|tchmode)|e(gingroup|lowdisplays(hortskip|kip))|inoppenalty|o(tmark|x(maxdepth)?)|rokenpenalty)|c(atcode|har(def)?|l(eaders|ose(in|out)|ubpenalty)|o(py|unt(def)?)|r(cr)?|sname)|d(ay|e(adcycles|f(ault(hyphenchar|skewchar))?|l(code|imiter(factor|shortfall)?))|i(men(def)?|s(cretionary|play(indent|limits|style|wid(owpenalty|th)))|vide)|oublehyphendemerits|p|ump)|e(def|lse|mergencystretch|nd(csname|group|input|linechar)?|qno|rr(help|message|or(contextlines|stopmode))|scapechar|very(cr|display|hbox|job|math|par|vbox)|x(hyphenpenalty|pandafter))|f(am|i(nalhyphendemerits|rstmark)?|loatingpenalty|ont(dimen|name)?|uturelet)|g(def|lobal(defs)?)|h(a(lign|ng(after|indent))|b(adness|ox)|f(il(l|neg)?|uzz)|o(ffset|ldinginserts)|rule|s(ize|kip|s)|t|yphen(ation|char|penalty))|i(f(ca(se|t)|dim|eof|false|h(box|mode)|inner|mmode|num|odd|true|v(box|mode|oid)|x)?|gnorespaces|mmediate|n(dent|put(lineno)?|sert(penalties)?|terlinepenalty))|jobname|kern|l(a(nguage|st(box|kern|penalty|skip))|ccode|e(aders|ft(hyphenmin|skip)?|qno|t)|i(mits|ne(penalty|skip(limit)?))|o(ng|oseness|wer(case)?))|m(a(g|rk|th(accent|bin|c(h(ar(def)?|oice)|lose|ode)|inner|o(p(en)?|rd)|punct|rel|surround)|xde(adcycles|pth))|e(aning|dmuskip|ssage)|kern|o(nth|ve(left|right))|skip|u(ltiply|skip(def)?))|n(ewlinechar|o(align|boundary|expand|indent|limits|ns(cript|topmode))|u(ll(delimiterspace|font)|mber))|o(mit|pen(in|out)|r|ut(er|put(penalty)?)|ver(fullrule|line|withdelims)?)|p(a(ge(depth|fil(l(lstretch|stretch)|stretch)|goal|s(hrink|tretch)|total)|r(fillskip|indent|s(hape|kip))?|tterns|using)|enalty|ostdisplaypenalty|re(display(penalty|size)|tolerance|v(depth|graf)))|r(a(dical|ise)|e(ad|l(ax|penalty))|ight(hyphenmin|skip)?|omannumeral)|s(cr(ipt(font|s(cript(font|style)|pace|tyle))|ollmode)|et(box|language)|fcode|h(ipout|ow(box(breadth|depth)?|lists|the)?)|k(ewchar|ip(def)?)|p(a(ce(factor|skip)|n)|ecial|lit(botmark|firstmark|maxdepth|topskip))|tring)|t(abskip|ext(font|style)|h(e|i(ckmuskip|nmuskip))|ime|o(ks(def)?|lerance|p(mark|skip))|racing(commands|lostchars|macros|o(nline|utput)|pa(ges|ragraphs)|restores|stats))|u(c(code|hyph)|n(derline|h(box|copy)|kern|penalty|skip|v(box|copy))|ppercase)|v(a(djust|lign)|b(adness|ox)|center|f(il(l|neg)?|uzz)|offset|rule|s(ize|kip|plit|s)|top)|w(d|idowpenalty|rite)|x(def|leaders|spaceskip)|year)(?=[^a-zA-Z]))|(\\s|\\-|\\/))'
  }
  pdfTexPrimitives: {
    comment: 'These dont apply on all engines, but I feel the names are specific enough and pdfLaTeX is used enough to justify it.'
    name: 'entity.name.function.primitive.pdftex.latex'
    match: '(\\\\)(pdf(o(ut(put|line)|bj(compresslevel)?)|m(inorversion|a(p(file|line)|tch)|ovechars|dfivesum)|c(o(mpresslevel|pyfont|lorstack(init)?)|atalog|reationdate)|d(e(cimaldigits|st(margin)?)|raftmode)|horigin|vorigin|p(age(width|height|sattr|attr|re(sources|f)|box)|k(resolution|mode)|r(otrudechars|ependkern|imitive)|xdimen)|i(n(fo(omitdate)?|clu(dechars|sion(errorlevel|copyfonts))|terwordspaceo(n|ff)|sertht)|gnoreddimen|mage(resolution|hicolor|applygamma|gamma))|s(uppress(ptexinfo|warning(dup(map|dest)|pagegroup))|t(artlink|rcmp)|et(randomseed|matrix)|ave(pos)?|hellescape)|n(ames|o(ligatures|builtintounicode|rmaldeviate))|t(ra(iler(id)?|cingfonts)|hread(margin)?|startthread|ex(banner|revision|version))|f(o(nt(expand|attr|name|objnum|size)|rcepagebox)|akespace|i(rstlineheight|le(moddate|size|dump)))|a(djust(spacing|interwordglue)|ppendkern|nnot)|un(i(queresname|formdeviate)|escapehex)|g(entounicode|lyphtounicode|amma)|l(ast(lin(edepth|k)|obj|x(form|image(colordepth|pages)?|pos)|annot|match|ypos)|i(nkmargin|teral))|e(achline(height|depth)|nd(link|thread)|scape(string|name|hex)|lapsedtime)|r(e(f(obj|x(form|image))|s(ettimer|tore)|tval)|andomseed)|x(form(name)?|image(bbox)?))|efcode|r(pcode|ightmarginkern)|l(pcode|e(ftmarginkern|tterspacefont))|tagcode|kn(b(scode|ccode)|accode)|s(tbscode|hbscode)|if(pdf(abs(num|dim)|primitive)|incsname)|quitvmode|vadjust)(?=[^a-zA-Z])'
  }
  unsortedPrimitives: {
    comment: 'Im not sure which engine first defined these, but they are all primitives in LaTeX'
    name: 'entity.name.function.primitive.latex'
    match: '(\\\\)(un(less|expanded)|botmarks|c(urrent(if(type|branch|level)|group(level|type))|lubpenalties)|p(a(gediscards|rshape(dimen|indent|length))|r(otected|edisplaydirection))|m(u(toglue|expr)|arks|iddle)|d(i(splaywidowpenalties|mexpr)|etokenize)|f(ontchar(ic|dp|ht|wd)|irstmarks)|widowpenalties|t(racing(ifs|assigns|scantokens|nesting|groups)|opmarks)|i(f(fontchar|defined|csname)|nter(linepenalties|actionmode))|s(how(groups|tokens|ifs)|plit(firstmarks|botmarks|discards)|aving(vdiscards|hyphcodes)|cantokens)|glue(expr|tomu|s(hrink(order)?|tretch(order)?))|e(veryeof|TeX(version|revision))|readline|last(nodetype|linefit)|numexpr)(?=[^a-zA-Z])'
  }
  doubleCaret: {
    comment: 'Im not sure what these are called, but they seem to work (eg. ^^M is a linebreak)'
    name: 'constant.character.latex'
    match: '\\^\\^(\\d+|.|$)'
  }

# Unfortunate necessity (mainly making a unique grammar for each coding language)

# Removed
  controlWordWithAt: {
    comment: 'To be used when @ is a letter'
    name: 'support.function.general.latex'
    match: '\\\\[a-zA-Z@]+'
  }
underscoreWithArgument: {
  comment: 'Matches an underscore and between curly brackets'
  name: 'punctuation.subscript.latex'
  begin: '_\\s*(?={)'
  end: '(?<=\\})'
  patterns: [
    { include: '#argumentScope' }
  ]
}
underscoreNoArgument: {
  comment: 'Matches an underscore and next character or macro. Considering making this give a warning, as brackets is best practice'
  name: 'punctuation.subscript.latex'
  match: '_\\s*(\\\\[a-zA-Z]+|\\\\[.]|.)?'
}
caretWithArgument: {
  comment: 'Matches a caret and between curly brackets'
  name: 'markup.other.superscript.latex'
  begin: '\\^\\s*'
  beginCaptures:
    0:
      name: 'punctuation.superscript.latex'
  end: '(?<=[^\\^])'
  patterns: [
    { include: '$self' }
  ]
}
caretNoArgument: {
  comment: 'Matches a caret and next character or macro. Considering making this give a warning, as brackets is best practice'
  name: 'punctuation.superscript.latex'
  match: '\\^\\s*(\\\\[a-zA-Z]+|\\\\[.]|.)?'
}
